{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,YCLbC,EAAW,SAAAR,GAAK,OAGzB,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MC2EAG,G,wDArDb,aAAc,IAAD,8BACX,gBAmBAH,aAAe,SAACI,GAAD,OAAQ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhB7D,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IANJ,E,qDAaX,WAAoB,IAAD,OAClBI,MAAM,8CACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAS/C,WAGA,MAAiCC,KAAKN,MAA9Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC3CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OAEE,sBAAK9B,UAAU,MAAf,UACA,oDACA,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAce,KAAKf,eAIlB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA7CdI,cChBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c4c6e6c1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n\nexport const Card = props => (\n\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2> {props.monster.name} </h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n\n            \n    <div className=\"card-list\">\n        \n        { props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/> \n        ))}     \n\n    </div>\n            \n\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n    className=\"search\"\n    type=\"search\" \n    placeholder={placeholder}\n    onChange={ handleChange }\n/>\n)\n\n","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Hello my name is Guillermo!\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    //Se declara el ESTADO inicial de la aplicación\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n  }\n\n\n  // Se ejecuta una petición FETCH cuando se monta el componente, se convierte a formato JSON y se modifica el estado del array\n    componentDidMount(){\n     fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response => response.json())\n          .then(users => this.setState({ monsters: users}));      \n   }\n\n   // Se obtiene el valor del INPUT\n    handleChange = (e) =>  this.setState({ searchField: e.target.value});\n     \n   \n\n\n    render(){\n\n  // Se desestructura el ESTADO   y se filtra el array en base al valor del INPUT y se guarda en un nuevo array\n    const { monsters, searchField} = this.state; \n    const filteredMonsters = monsters.filter( monster => \n          monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n      return (\n\n        <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n         placeholder=\"search monsters\"\n         handleChange={this.handleChange}\n        />\n\n\n          <CardList monsters = {filteredMonsters}/>\n          \n                  \n        </div>\n      )\n    }\n\n\n\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}